<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on for func() sake { }</title>
    <link>https://forfuncsake.github.io/post/</link>
    <description>Recent content in Posts on for func() sake { }</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Sat, 26 Aug 2017 13:57:07 +1000</lastBuildDate>
    
	<atom:link href="https://forfuncsake.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How To Trust Extra CA Certs In Your Go App</title>
      <link>https://forfuncsake.github.io/post/2017/08/trust-extra-ca-cert-in-go-app/</link>
      <pubDate>Sat, 26 Aug 2017 13:57:07 +1000</pubDate>
      
      <guid>https://forfuncsake.github.io/post/2017/08/trust-extra-ca-cert-in-go-app/</guid>
      <description>At work this week, I was tasked with updating a couple of older internal go applications currently serving HTTP to serve HTTPS instead.
Generally, go makes this a pretty simple task and there are plenty of existing guides on the web that cover the process, so I won&amp;rsquo;t bore you with it here.
Our system is (now) modeled as follows:
 +---------+ | Backend | +----^----+ | +---+---+ +-&amp;gt; | API | &amp;lt;-+ | +-------+ | https | | v | +---+---+ | | WebUI | | https +---+---+ | ^ | https | | v v +----+----+ +---+---+ | Browser | | CLI | +---------+ +-------+   The Backend and API always run on the same server The WebUI typically runs on the same server, but can run anywhere The CLI typically runs on a client workstation, but can run on the server The Browser (e.</description>
    </item>
    
    <item>
      <title>Blog Version Control</title>
      <link>https://forfuncsake.github.io/post/2017/07/blog-version-control/</link>
      <pubDate>Thu, 13 Jul 2017 21:39:38 +1000</pubDate>
      
      <guid>https://forfuncsake.github.io/post/2017/07/blog-version-control/</guid>
      <description>Following on from my last post&amp;hellip;
The Hugo Quickstart Guide gives instructions on setting up version control and publishing a site on GitHub Pages - but using the method of pushing to a gh-pages branch.
This is the typical path for a &amp;ldquo;project site&amp;rdquo;, but a user site (with no repository in the URL) will publish to Pages only from the master branch. So adding the hugo files to version control required me to either start another project - or just be sensible about it and use a non-master branch of the user project (which must be named &amp;lt;username&amp;gt;.</description>
    </item>
    
    <item>
      <title>package blog</title>
      <link>https://forfuncsake.github.io/post/2017/07/package-blog/</link>
      <pubDate>Wed, 12 Jul 2017 23:36:55 +1000</pubDate>
      
      <guid>https://forfuncsake.github.io/post/2017/07/package-blog/</guid>
      <description>Every blog needs a first post, and what better subject to record than the birth of this blog.
Last weekend, I was reading a particular reddit post and noticed the OPs username forfunc. I&amp;rsquo;ve also been watching (and loving!) @francesc&amp;rsquo;s JustForFunc channel. I like the wordplay and thought myself very clever indeed when I came up with &amp;ldquo;for func sake&amp;rdquo;&amp;hellip;
It just so happened that the username was available in the places I want to use it; and I&amp;rsquo;ve been less than thrilled with my previous username choice(s)&amp;hellip; so I spent an hour or so creating new accounts across the web.</description>
    </item>
    
  </channel>
</rss>